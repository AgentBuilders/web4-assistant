import {readFileSync}Â from 'fs';
(async function() {
//const wasm = readFileSync('./out/main.wasm');
const wasm = readFileSync('./main.wasm');
    const instance = (await WebAssembly.instantiate(wasm, {
        env: {
            "__syscall_getcwd": () => console.log('__syscall_getcwd'),
            "read_register" : (a, b) => {console.log('read_register', a, b); return new Uint8Array([0,0,0,0])},
            "register_len" : () => {console.log('register_len'); return BigInt(8);},
            "current_account_id" : () => console.log('current_account_id'),
            "signer_account_id" : () => console.log('signer_account_id'),
            "signer_account_pk" : () => console.log('signer_account_pk'),
            "predecessor_account_id" : () => console.log('predecessor_account_id'),
            "input" : () => console.log('input'),
            "block_index" : () => console.log('block_index'),
            "block_timestamp" : () => console.log('block_timestamp'),
            "epoch_height" : () => console.log('epoch_height'),
            "storage_usage" : () => console.log('storage_usage'),
            "account_balance" : () => console.log('account_balance'),
            "account_locked_balance" : () => console.log('account_locked_balance'),
            "attached_deposit" : () => {console.log('attached_deposit'); return 0;},
            "prepaid_gas" : () => console.log('prepaid_gas'),
            "used_gas" : () => console.log('used_gas'),
            "random_seed" : () => console.log('random_seed'),
            "sha256": () => console.log(''),
            "keccak256": () => console.log(''),
            "keccak512": () => console.log(''),
            "value_return" : () => console.log('value_return'),
            "panic" : () => console.log('panic'),
            "panic_utf8": () => console.log(''),
            "log_utf8": () => console.log(''),
            "log_utf16": () => console.log(''),
            "promise_create" : () => console.log('promise_create'),
            "promise_then" : () => console.log('promise_then'),
            "promise_and" : () => console.log('promise_and'),
            "promise_batch_create" : () => console.log('promise_batch_create'),
            "promise_batch_then" : () => console.log('promise_batch_then'),
            "promise_batch_action_create_account" : () => console.log('promise_batch_action_create_account'),
            "promise_batch_action_deploy_contract" : () => console.log('promise_batch_action_deploy_contract'),
            "promise_batch_action_function_call" : () => console.log('promise_batch_action_function_call'),
            "promise_batch_action_transfer" : () => console.log('promise_batch_action_transfer'),
            "promise_batch_action_stake" : () => console.log('promise_batch_action_stake'),
            "promise_batch_action_add_key_with_full_access" : () => console.log('promise_batch_action_add_key_with_full_access'),
            "promise_batch_action_add_key_with_function_call" : () => console.log('promise_batch_action_add_key_with_function_call'),
            "promise_batch_action_delete_key" : () => console.log('promise_batch_action_delete_key'),
            "promise_batch_action_delete_account" : () => console.log('promise_batch_action_delete_account'),
            "promise_results_count" : () => console.log('promise_results_count'),
            "promise_result" : () => console.log('promise_result'),
            "promise_return" : () => console.log('promise_return'),
            "storage_write" : () => console.log('storage_write'),
            "storage_read" : () => console.log('storage_read'),
            "storage_remove" : () => console.log('storage_remove'),
            "storage_has_key" : () => console.log('storage_has_key'),
            "validator_stake" : () => console.log('validator_stake'),
            "validator_total_stake" : () => console.log('validator_total_stake'),
            "_tzset_js": () => console.log('_tzset_js'),
            "_localtime_js": () => console.log('_localtime_js'),
            "_emscripten_date_now": () => console.log('_emscripten_date_now')
        },
        wasi_snapshot_preview1: {
            fd_write: () => console.log('fd_write'),
            environ_get: () => {console.log('environ_get'); return 0;},
            environ_sizes_get: () => {console.log('environ_sizes_get'); return 0;},
            clock_time_get: () => new Date().getTime(),
            fd_close: () => console.log('fd_close'),
            fd_fdstat_get: () => console.log('fd_fdstat_get'),
            fd_seek: () => console.log('fd_seek'),
            proc_exit: () => console.log('proc_exit'),
            random_get: () => {console.log("random_get"); return 0;}
        }
    })).instance.exports;
    console.log(instance.direct_script());
})();